sheetName = paste0("SS", j),
col.names = TRUE,
row.names = TRUE,
append = TRUE)
}
library("xlsx")
write.xlsx(x = foot6_SS5,
file = "./dat_comp/foot6_compounds_norm.xlsx",
sheetName = "SS5",
col.names = TRUE,
row.names = TRUE,
append = FALSE)
for(j in 6:6) {
write.xlsx(x = get(paste0("foot6_SS", j)),
file = "./dat_comp/foot6_compounds_norm.xlsx",
sheetName = paste0("SS", j),
col.names = TRUE,
row.names = TRUE,
append = TRUE)
}
library("xlsx")
write.xlsx(x = foot7_SS5,
file = "./dat_comp/foot7_compounds_norm.xlsx",
sheetName = "SS5",
col.names = TRUE,
row.names = TRUE,
append = FALSE)
for(j in 6:6) {
write.xlsx(x = get(paste0("foot7_SS", j)),
file = "./dat_comp/foot7_compounds_norm.xlsx",
sheetName = paste0("SS", j),
col.names = TRUE,
row.names = TRUE,
append = TRUE)
}
library("xlsx")
write.xlsx(x = foot8_SS4,
file = "./dat_comp/foot8_compounds_norm.xlsx",
sheetName = "SS4",
col.names = TRUE,
row.names = TRUE,
append = FALSE)
for(j in 5:6) {
write.xlsx(x = get(paste0("foot8_SS", j)),
file = "./dat_comp/foot8_compounds_norm.xlsx",
sheetName = paste0("SS", j),
col.names = TRUE,
row.names = TRUE,
append = TRUE)
}
library("xlsx")
write.xlsx(x = foot9_SS4,
file = "./dat_comp/foot9_compounds_norm.xlsx",
sheetName = "SS4",
col.names = TRUE,
row.names = TRUE,
append = FALSE)
for(j in 5:6) {
write.xlsx(x = get(paste0("foot9_SS", j)),
file = "./dat_comp/foot9_compounds_norm.xlsx",
sheetName = paste0("SS", j),
col.names = TRUE,
row.names = TRUE,
append = TRUE)
}
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(stringr)
##
#  clean_common: Function to select, filter, clean, filter and merge
#  compounds using the logic of:
#  * unique to the samples, not the control, for ALL samples; or
#  * in both samples and control, but much stronger in the control
#
#  Inputs:
#  * dat: data.frame sourced from merging spreadsheets of GCxGC output
#  * sample_names: names of specific samples (e.g., SS5_Foot_1_a)
#  * control_names: names of specific control samples (e.g., SS5_Foot_1_Control_a)
#  * ratio_par: cut-off for the logic of "in both samples and control" - if this
#      is set very large, will eliminate cross-overs.
#
#  Returns:
#  * samples_keep: list of full data.frames for individual replicates, cleaned
#      down to relevant compounds using above logic
##
clean_common <- function(dat,
sample_names,
control_names,
ratio_par = 2.0) {
samples <- vector("list", length = length(sample_names))
names(samples) <- sample_names
controls <- vector("list", length = length(control_names))
names(controls) <- control_names
# Extract specific samples and controls of interest and
# dump all but the largest Area example of each compound
for(j in 1:length(sample_names)) {
samples[[j]] <- dat %>% subset(Sample == sample_names[j]) %>%
group_by(Name) %>%
filter(Area == max(Area)) %>%
ungroup() %>% filter(substr(Name, 1, 4) != "Peak")
samples[[j]] <- samples[[j]][!duplicated(samples[[j]]$Name), ]
}
for(j in 1:length(control_names)) {
controls[[j]] <- dat %>% subset(Sample == control_names[j]) %>%
group_by(Name) %>%
filter(Area == max(Area)) %>%
ungroup() %>% filter(substr(Name, 1, 4) != "Peak")
controls[[j]] <- controls[[j]][!duplicated(controls[[j]]$Name), ]
}
# merge controls
control <- do.call("rbind", controls)
control <- control %>% group_by(Name) %>%
filter(Area == max(Area)) %>%
ungroup()
control <- control[!duplicated(control$Name), ]
# Find compounds that are in each sample that are also in control
samples_keep <- samples
for(j in 1:length(sample_names)) {
samp <- samples[[j]] %>% filter(samples[[j]]$Name %in% control$Name)
cont <- control %>% filter(control$Name %in% samples[[j]]$Name)
# ratio is high enough to keep
samp_SN <- unlist(samp[order(samp$Name), "PeakSN"])
cont_SN <- unlist(cont[order(cont$Name), "PeakSN"])
contrib1 <- samp %>% filter((samp_SN / cont_SN) > ratio_par)
# also, compounds that are *not* in the controls
contrib2 <- samples[[j]] %>% filter(!(samples[[j]]$Name %in% control$Name))
samples_keep[[j]] <- rbind(contrib1, contrib2)
}
names(samples_keep) <- sample_names
samples_keep
}
##
#
#  join_common: Function which takes output of clean_common above,
#    and merges based on common presence across all replicates of compounds.
#
#  Inputs:
#  * compounds: list of data.frames, 16 columns as in the spreadsheets
#
#  Outputs:
#  * common: merged, simplified data.frame, created via inner_join of data.frames after filtering.
##
join_common <- function(compounds) {
n_samp <- length(compounds)
subset_compounds <- vector("list", length = n_samp)
for(j in 1:n_samp) {
subset_compounds[[j]] <- compounds[[j]]
if(n_samp > 1) {
for(k in (1:n_samp)[-j]) {
subset_compounds[[j]] <- subset_compounds[[j]] %>%
subset(subset_compounds[[j]]$Name %in% compounds[[k]]$Name)
}
}
subset_compounds[[j]] <- subset_compounds[[j]] %>% select(Name, Area, PeakSN)
}
# Join first two, if they exist
if(n_samp > 1) {
common <- inner_join(x = subset_compounds[[1]], y = subset_compounds[[2]], by = "Name")
if(n_samp >= 3) {
for(j in 3:n_samp) {
common <- inner_join(x = common, y = subset_compounds[[j]], by = "Name")
}
}
} else {
common <- subset_compounds[[1]][, c("Name", "Area", "PeakSN")]
}
names(common) <- c("Name", paste0(c("Area_", "PeakSN_"), rep(1:n_samp, each = 2)))
common
}
load("./dat/foot1n.rda")
foot1m$Sample <- str_replace_all(foot1m$Sample, " ", "_")
foot1_SS2 <- join_common( clean_common(foot1m,
sample_names = c("SS2_Foot_1_a", "SS2_Foot_1_b"),
control_names = c("SS2_Foot_1_Control"),
ratio_par = 2.0) )
foot1_SS3 <- join_common( clean_common(foot1m,
sample_names = c("SS3_Foot_1_a", "SS3_Foot_1_b", "SS3_Foot_1_c"),
control_names = c("SS3_Foot_1_Control"),
ratio_par = 2.0) )
foot1_SS4 <- join_common( clean_common(foot1m,
sample_names = c("SS4_Foot_1_a", "SS4_Foot_1_b", "SS4_Foot_1_c"),
control_names = c("SS4_Foot_1_Control_a", "SS4_Foot_1_Control_b", "SS4_Foot_1_Control_c"),
ratio_par = 2.0) )
foot1_SS5 <- join_common( clean_common(foot1m,
sample_names = c("SS5_Foot_1_a", "SS5_Foot_1_b", "SS5_Foot_1_c"),
control_names = c("SS5_Foot_1_Control_a", "SS5_Foot_1_Control_b", "SS5_Foot_1_Control_c"),
ratio_par = 2.0) )
foot1_SS6 <- join_common( clean_common(foot1m,
sample_names = c("SS6_Foot_1_a", "SS6_Foot_1_b"),
control_names = c("SS6_Foot_1_Control_a", "SS6_Foot_1_Control_b"),
ratio_par = 2.0) )
load("./dat/foot2n.rda")
foot2m$Sample <- str_replace_all(foot2m$Sample, " ", "_")
foot2_SS2 <- join_common( clean_common(foot2m,
sample_names = c("SS2_Foot_2_a", "SS2_Foot_2_b"),
control_names = c("SS2_Foot_2_Control"),
ratio_par = 2.0) )
foot2_SS3 <- join_common( clean_common(foot2m,
sample_names = c("SS3_Foot_2_a", "SS3_Foot_2_b", "SS3_Foot_2_c"),
control_names = c("SS3_Foot_2_Control"),
ratio_par = 2.0) )
foot2_SS4 <- join_common( clean_common(foot2m,
sample_names = c("SS4_Foot_2_a", "SS4_Foot_2_b", "SS4_Foot_2_c"),
control_names = c("SS4_Foot_2_Control_a", "SS4_Foot_2_Control_b", "SS4_Foot_2_Control_c"),
ratio_par = 2.0) )
foot2_SS5 <- join_common( clean_common(foot2m,
sample_names = c("SS5_Foot_2_a", "SS5_Foot_2_b", "SS5_Foot_2_c"),
control_names = c("SS5_Foot_2_Control_a", "SS5_Foot_2_Control_b", "SS5_Foot_2_Control_c"),
ratio_par = 2.0) )
foot2_SS6 <- join_common( clean_common(foot2m,
sample_names = c("SS6_Foot_2_a", "SS6_Foot_2_b"),
control_names = c("SS6_Foot_2_Control_a", "SS6_Foot_2_Control_b"),
ratio_par = 2.0) )
load("./dat/foot3n.rda")
foot3m$Sample <- str_replace_all(foot3m$Sample, " ", "_")
foot3_SS5 <- join_common( clean_common(foot3m,
sample_names = c("SS5_Bone_3_a", "SS5_Foot_3_b"),
control_names = c("SS5_Foot_3_Control_a_(PVC_+_big_jar_a)",
"SS5_Foot_3_Control_b_(PVC_+_zip_lock_a)"),
ratio_par = 2.0) )
foot3_SS6 <- join_common( clean_common(foot3m,
sample_names = c("SS6_Foot_3_a", "SS6_Foot_3_b", "SS6_Foot_3_c"),
control_names = c("SS6_Foot_3_Control_a_(PVC_+_big_glass_jar_a)",
"SS6_Foot_3_Control_a_(PVC_+_zip_lock_a)"),
ratio_par = 2.0) )
load("./dat/foot4n.rda")
foot4m$Sample <- str_replace_all(foot4m$Sample, " ", "_")
foot4_SS5 <- join_common( clean_common(foot4m,
sample_names = c("SS5_Foot_4_a", "SS5_Foot_4_b"),
control_names = c("SS5_Foot_4_Control_a_(PVC_+_big_jar_a)",
"SS5_Foot_4_Control_b_(PVC_+_zip_lock_a)"),
ratio_par = 2.0) )
foot4_SS6 <- join_common( clean_common(foot4m,
sample_names = c("SS6_Foot_4_a", "SS6_Foot_4_b", "SS6_Foot_4_c"),
control_names = c("SS6_Foot_4_Control_a_(PVC_+_big_glass_jar_a)",
"SS6_Foot_4_Control_a_(PVC_+_zip_lock_a)"),
ratio_par = 2.0) )
load("./dat/foot5n.rda")
foot5m$Sample <- str_replace_all(foot5m$Sample, " ", "_")
foot5_SS2 <- join_common( clean_common(foot5m,
sample_names = c("SS2_Foot_5_a"),
control_names = c("SS2_Foot_5_Control"),
ratio_par = 2.0) )
foot5_SS3 <- join_common( clean_common(foot5m,
sample_names = c("SS3_Foot_5_a", "SS3_Foot_5_b", "SS3_Foot_5_c"),
control_names = c("SS3_Foot_5_Control"),
ratio_par = 2.0) )
foot5_SS4 <- join_common( clean_common(foot5m,
sample_names = c("SS4_Foot_5_a", "SS4_Foot_5_b", "SS4_Foot_5_c"),
control_names = c("SS4_Foot_5_Control_a", "SS4_Foot_5_Control_b",
"SS4_Foot_5_Control_c"),
ratio_par = 2.0) )
foot5_SS5 <- join_common( clean_common(foot5m,
sample_names = c("SS5_Foot_5_a", "SS5_Foot_5_b", "SS5_Foot_5_c"),
control_names = c("SS5_Foot_5_Control_a", "SS5_Foot_5_Control_b",
"SS5_Foot_5_Control_c"),
ratio_par = 2.0) )
foot5_SS6 <- join_common( clean_common(foot5m,
sample_names = c("SS6_Foot_5_a", "SS6_Foot_5_b"),
control_names = c("SS6_Foot_5_Control_a", "SS6_Foot_5_Control_b",
"SS6_Foot_5_Control_c"),
ratio_par = 2.0) )
load("./dat/foot6n.rda")
foot6m$Sample <- str_replace_all(foot6m$Sample, " ", "_")
foot6_SS5 <- join_common( clean_common(foot6m,
sample_names = c("SS5_Foot_6_a", "SS5_Foot_6_b", "SS5_Foot_6_c"),
control_names = c("SS5_Foot_6_Control_a", "SS5_Foot_6_Control_b", "SS5_Foot_6_Control_c"),
ratio_par = 2.0) )
foot6_SS6 <- join_common( clean_common(foot6m,
sample_names = c("SS6_Foot_6_a", "SS6_Foot_6_b"),
control_names = c("SS6_Foot_6_Control_a", "SS6_Foot_6_Control_b"),
ratio_par = 2.0) )
load("./dat/foot7n.rda")
foot7m$Sample <- str_replace_all(foot7m$Sample, " ", "_")
foot7_SS5 <- join_common( clean_common(foot7m,
sample_names = c("SS5_Foot_7_a", "SS5_Foot_7_b", "SS5_Foot_7_c"),
control_names = c("SS5_Foot_7_Control_a", "SS5_Foot_7_Control_b", "SS5_Foot_7_Control_c"),
ratio_par = 2.0) )
foot7_SS6 <- join_common( clean_common(foot7m,
sample_names = c("SS6_Foot_7_a", "SS6_Foot_7_b", "SS6_Foot_7_c"),
control_names = c("SS6_Foot_7_Control_a", "SS6_Foot_7_Control_b"),
ratio_par = 2.0) )
load("./dat/foot8n.rda")
foot8m$Sample <- str_replace_all(foot8m$Sample, " ", "_")
foot8_SS4 <- join_common( clean_common(foot8m,
sample_names = c("SS4_Foot_8_a", "SS4_Foot_8_b"),
control_names = c("SS4_Foot_8_Control_a", "SS4_Foot_8_Control_b", "SS4_Foot_8_Control_c"),
ratio_par = 2.0) )
foot8_SS5 <- join_common( clean_common(foot8m,
sample_names = c("SS5_Foot_8_a", "SS5_Foot_8_b", "SS5_Foot_8_c"),
control_names = c("SS5_Foot_8_Control_a", "SS5_Foot_8_Control_b", "SS5_Foot_8_Control_c"),
ratio_par = 2.0) )
foot8_SS6 <- join_common( clean_common(foot8m,
sample_names = c("SS6_Foot_8_a", "SS6_Foot_8_b"),
control_names = c("SS6_Foot_8_Control_a", "SS6_Foot_8_Control_b"),
ratio_par = 2.0) )
load("./dat/foot9n.rda")
foot9m$Sample <- str_replace_all(foot9m$Sample, " ", "_")
foot9_SS4 <- join_common( clean_common(foot9m,
sample_names = c("SS4_Foot_9_a", "SS4_Foot_9_b", "SS4_Foot_9_c"),
control_names = c("SS4_Foot_9_Control_a", "SS4_Foot_9_Control_b", "SS4_Foot_9_Control_c"),
ratio_par = 2.0) )
foot9_SS5 <- join_common( clean_common(foot9m,
sample_names = c("SS5_Foot_9_a", "SS5_Foot_9_b", "SS5_Foot_9_c"),
control_names = c("SS5_Foot_9_Control_a", "SS5_Foot_9_Control_b", "SS5_Foot_9_Control_c"),
ratio_par = 2.0) )
foot9_SS6 <- join_common( clean_common(foot9m,
sample_names = c("SS6_Foot_9_a", "SS6_Foot_9_b", "SS6_Foot_9_c"),
control_names = c("SS6_Foot_9_Control_a", "SS6_Foot_9_Control_b"),
ratio_par = 2.0) )
all_SS <- vector("list", 29)
for(j in 2:6) {
all_SS[[j-1]] <- get(paste0("foot1_SS", j))
all_SS[[j+4]] <- get(paste0("foot2_SS", j))
all_SS[[j+13]] <- get(paste0("foot5_SS", j))
}
for(j in 5:6) {
all_SS[[j+6]] <- get(paste0("foot3_SS", j))
all_SS[[j+8]] <- get(paste0("foot4_SS", j))
all_SS[[j+15]] <- get(paste0("foot6_SS", j))
all_SS[[j+17]] <- get(paste0("foot7_SS", j))
}
for(j in 4:6) {
all_SS[[j+20]] <- get(paste0("foot8_SS", j))
all_SS[[j+23]] <- get(paste0("foot9_SS", j))
}
names(all_SS) <- c(paste0("foot1_SS", 2:6),
paste0("foot2_SS", 2:6),
paste0("foot3_SS", 5:6),
paste0("foot4_SS", 5:6),
paste0("foot5_SS", 2:6),
paste0("foot6_SS", 5:6),
paste0("foot7_SS", 5:6),
paste0("foot8_SS", 4:6),
paste0("foot9_SS", 4:6))
save(file = "./dat_comp/all_SS_PCA.rda", all_SS)
rm(list = ls())
load("./dat_comp/all_SS_PCA.rda")
all_compounds <- sort(unique(
unlist(lapply(all_SS, FUN = function(x) { unlist(x$Name) }))))
length(all_compounds)
loc1 <- grep(pattern = "Benzene, bromo-", all_compounds,
ignore.case = TRUE)
# all_compounds[loc1]
loc2 <- grep(pattern = "oxygen", all_compounds, ignore.case = TRUE)
# all_compounds[loc2]
loc3 <- grep(pattern = "acetone", all_compounds, ignore.case = TRUE)
loc3 <- loc3[1]
# all_compounds[loc3]
loc4 <- grep(pattern = "methyl alc", all_compounds, ignore.case = TRUE)
# all_compounds[loc4]
loc5 <- grep(pattern = "methanol, TMS", all_compounds,
ignore.case = TRUE)
# all_compounds[loc5]
loc6 <- grep(pattern = "carbon diox", all_compounds, ignore.case = TRUE)
# all_compounds[loc5]
remove_specifics <- c(loc1, loc2, loc3, loc4, loc5, loc6)
remove1 <- all_compounds[remove_specifics]
loc1 <- grep(pattern = "Sil", all_compounds, ignore.case = TRUE)
# all_compounds[loc1]
loc2 <- grep(pattern = "TMS", all_compounds)
# all_compounds[loc2]
loc3 <- grep(pattern = "TBDMS", all_compounds)
# all_compounds[loc3]
remove2 <- all_compounds[c(loc1, loc2, loc3)]
loc1 <- grep(pattern = "\\(E\\)-$", all_compounds)
loc2 <- grep(pattern = "\\(Z\\)-$", all_compounds)
loc3 <- grep(pattern = "\\(S\\)-$", all_compounds)
loc4 <- grep(pattern = "\\(R\\)-$", all_compounds)
to_clean <- c(loc1, loc2, loc3, loc4)
mappings <- data.frame(Original = NA, Transformed = NA)
for(j in 1:length(to_clean)) {
orig <- all_compounds[to_clean[j]]
fixed <- strsplit(orig, "\\(")[[1]][1]
fixed <- substr(fixed, 1, nchar(fixed) - 2)
mappings[j, ] <- c(orig,
fixed)
}
test <- lapply(all_SS, FUN = function(x) {
y <- x %>% filter(!(Name %in% remove1 | Name %in% remove2))
which_rows <- which(y$Name %in% mappings$Original)
if(length(which_rows) > 0) {
for(j in 1:length(which_rows)) {
orig <- unlist(y[which_rows[j], "Name"])
y[which_rows[j], "Name"] <- mappings[mappings$Original == orig,
"Transformed"]
}
}
y
})
test <- lapply(test, FUN = function(x) {
dupes <- which(duplicated(x$Name))
if(length(dupes) > 0) {
x[-dupes, ]
} else {
x
}
})
library("xlsx")
write.xlsx(x = test[[1]],
file = "./dat_comp/all_feet_cleaned.xlsx",
sheetName = names(test)[1],
col.names = TRUE,
row.names = TRUE,
append = FALSE)
for(j in 2:length(test)) {
write.xlsx(x = test[[j]],
file = "./dat_comp/all_feet_cleaned.xlsx",
sheetName = names(test)[j],
col.names = TRUE,
row.names = TRUE,
append = TRUE)
}
compounds <- unlist(lapply(test, FUN = function(x) { x$Name }))
summary_table <- table(compounds)
summary_table <- sort(summary_table, decreasing = TRUE)
top_compounds <- summary_table[1:(min(which(summary_table < 10))-1)]
output_df <- data.frame(top_compounds)
names(output_df) <- c("Compound", "Frequency (out of 29)")
write.csv(file = "./dat_comp/top_compounds.csv", output_df,
row.names = FALSE)
output_df2 <- as.data.frame(matrix(data = NA, nrow = nrow(output_df),
ncol = 29))
names(output_df2) <- names(test)
output_df2 <- cbind(output_df, output_df2)
for(j in 1:nrow(output_df)) {
comp <- output_df[j, "Compound"]
fit <- unlist(lapply(test, FUN = function(x) {
if(comp %in% x$Name) { 1 } else { 0 }}))
output_df2[j, -(1:2)] <- fit
}
write.csv(file = "./dat_comp/top_compounds_withSpecifics.csv", output_df2,
row.names = FALSE)
unique_compounds <- sort(unique(
unlist(lapply(test, FUN = function(x) { x$Name }))))
pca_dat <- as.data.frame(matrix(data = 0.0, nrow = length(unique_compounds),
ncol = 30))
pca_dat[, 1] <- unique_compounds
names(pca_dat) <- c("Name", names(test))
for(j in 1:length(test)) {
x <- test[[j]]
x_names <- x$Name
x_area <- apply(x, MAR = 1, FUN = function(y) { max(y[seq(2, length(y), 2)]) })
pca_dat[pca_dat$Name %in% x_names, j+1] <- x_area
}
extracting <- pca_dat[, -1]
extracting <- apply(extracting, MAR = 2, FUN = function(x) { as.numeric(x) })
row.names(extracting) <- pca_dat$Name
pca_dat <- extracting
write.csv(file = "pca_ready.csv", pca_dat)
pca <- prcomp(x = pca_dat)
library(factoextra)
png(file = "PCA_Scree.png", width = 500, height = 250)
fviz_eig(pca)
dev.off()
png(file = "PCA_Individual_Compounds.png", width = 1000, height = 1000)
fviz_pca_ind(pca,
col.ind = "cos2", # Color by the quality of representation
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE,     # Avoid text overlapping
max.overlaps = 0)
dev.off()
png(file = "PCA_Variables.png", width = 1000, height = 1000)
fviz_pca_var(pca,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = FALSE     # Avoid text overlapping
)
dev.off()
compounds_subset <- as.character(output_df2$Compound)
pca_dat2 <- pca_dat
pca_dat2 <- pca_dat2[row.names(pca_dat2) %in% compounds_subset, ]
pca <- prcomp(x = pca_dat2)
png(file = "PCA_Scree_Tops.png", width = 500, height = 250)
fviz_eig(pca)
dev.off()
png(file = "PCA_Individual_Compounds_Tops_1_2.png", width = 1000, height = 1000)
fviz_pca_ind(pca,
axes = c(1, 2),
col.ind = "cos2", # Color by the quality of representation
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE,     # Avoid text overlapping
max.overlaps = 0)
dev.off()
png(file = "PCA_Individual_Compounds_Tops_1_3.png", width = 1000, height = 1000)
fviz_pca_ind(pca,
axes = c(1, 3),
col.ind = "cos2", # Color by the quality of representation
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE,     # Avoid text overlapping
max.overlaps = 0)
dev.off()
png(file = "PCA_Individual_Compounds_Tops_2_3.png", width = 1000, height = 1000)
fviz_pca_ind(pca,
axes = c(2, 3),
col.ind = "cos2", # Color by the quality of representation
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE,     # Avoid text overlapping
max.overlaps = 0)
dev.off()
png(file = "PCA_Variables_Top.png", width = 1000, height = 1000)
fviz_pca_var(pca,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = FALSE     # Avoid text overlapping
)
dev.off()
plot(pca$rotation[, 1], type = "l", ylim = c(-1, 1))
lines(pca$rotation[, 2], type = "l", col = "red")
lines(pca$rotation[, 3], type = "l", col = "blue")
save(file = "./dat_comp/pca1.rda", pca_dat)
save(file = "./dat_comp/pca2.rda", pca_dat2)
